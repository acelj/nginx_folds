# user user [group]：不配置或配置成nobody，则默认所有用户都可启动nginx
# user 指定可以运行的nginx用户 
# group: 指定可以运行的nginx用户组（可选）
# user  nobody;

# nginx 进程数量（多进程模式）
worker_processes  1;

# error_log file [日志级别]
# file : 表示输出到某个文件
#error_log  logs/error.log;
#error_log  logs/error.log  notice;
#error_log  logs/error.log  info;

# pid file 
# 该选项用于自定义配置pid文件的保存路径， 不指定则默认 logs/nginx.pid
#pid        logs/nginx.pid;


# event 模块
events {
    # 每个work进程可以同时开启最大连接数
    worker_connections  1024;
}

http {
    # mime.types 表示网络资源的某体类型，就是前段请求资源类型，具体可看mime文件
    include       mime.types;
    default_type  application/octet-stream;

    # 日志的格式
    #log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '
    #                  '$status $body_bytes_sent "$http_referer" '
    #                  '"$http_user_agent" "$http_x_forwarded_for"';

    # access_log path [format]  
    # path : 自定义访问日志的路径 + 名称
    # [format] : 自定义服务日志的格式（可选）
    #access_log  logs/access.log  main;

    # 表示开启或关闭使用sendfile 系统调用来传输文件，默认off
    # 但在很多webserver 中是开启的，来保证文件的高性能传输
    # sendfile 是linux 2.0+ 推出的一个系统调用，被称为零拷贝，没有用户间的拷贝
    sendfile        on;
    
    # 当使用sendfile 函数，tcp_nopush 才起作用，是tcp协议栈中的知识点
    # 当tcp_nopush = on 时，会调用tcp_cork 方法，是默认的，就是收到的数据报不会立即发送出去，而是等到数据报最大时，一次性传输出去，有利于解决网络堵塞。
    #tcp_nopush     on;

    # 客户端连接超时时间
    # = 0 : 表示禁用长连接。
    # = x ：表示长连接timeout
    #keepalive_timeout  0;
    keepalive_timeout  65;

    # 资源开启gzip 压缩， 这个需要看文件类型的， 要考虑压缩也是需耗费cpu资源的
    # 二进制的资源（图片、mp3 二进制文件）： 不必压缩
    #gzip  on;

    server {
        # 网络地址监听， 在mini.conf 有说明
        listen       80;

        # server_name name1 name2 ...
        # name 可有多个并列名称，此处也支持正则表达式书写
        # 也可配置 server_name ip地址
        server_name  localhost;

        #charset koi8-r;

        #access_log  logs/host.access.log  main;

        # mini.conf 有说明
        location / {
            root   html;

            # index index_file ： index_file 可包含多个用空格隔开的文件名，首先找到哪个页面就是哪个页面响应
            index  index.html index.htm;
        }

        # 使用自定义模块
        location /test {
            # 自定义模块写的关键词
            count;
        }

        #error_page  404              /404.html;

        # redirect server error pages to the static page /50x.html
        #
        error_page   500 502 503 504  /50x.html;
        location = /50x.html {
            root   html;
        }

        # proxy the PHP scripts to Apache listening on 127.0.0.1:80
        #
        #location ~ \.php$ {
        #    proxy_pass   http://127.0.0.1;
        #}

        # pass the PHP scripts to FastCGI server listening on 127.0.0.1:9000
        #
        #location ~ \.php$ {
        #    root           html;
        #    fastcgi_pass   127.0.0.1:9000;
        #    fastcgi_index  index.php;
        #    fastcgi_param  SCRIPT_FILENAME  /scripts$fastcgi_script_name;
        #    include        fastcgi_params;
        #}

        # deny access to .htaccess files, if Apache's document root
        # concurs with nginx's one
        #
        #location ~ /\.ht {
        #    deny  all;
        #}
    }


    # another virtual host using mix of IP-, name-, and port-based configuration
    #
    #server {
    #    listen       8000;
    #    listen       somename:8080;
    #    server_name  somename  alias  another.alias;

    #    location / {
    #        root   html;
    #        index  index.html index.htm;
    #    }
    #}


    # HTTPS server
    #
    #server {
    #    listen       443 ssl;
    #    server_name  localhost;

    #    ssl_certificate      cert.pem;
    #    ssl_certificate_key  cert.key;

    #    ssl_session_cache    shared:SSL:1m;
    #    ssl_session_timeout  5m;

    #    ssl_ciphers  HIGH:!aNULL:!MD5;
    #    ssl_prefer_server_ciphers  on;

    #    location / {
    #        root   html;
    #        index  index.html index.htm;
    #    }
    #}

}
